// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:

    /*
    DMux8Way(in=true,sel=address,a=r1,b=r2,c=r3,d=r4,e=r5,f=r6,g=r7,h=r8);
    And(a=load,b=r1,out=l1);
    And(a=load,b=r2,out=l2);
    And(a=load,b=r3,out=l3);
    And(a=load,b=r4,out=l4);
    And(a=load,b=r5,out=l5);
    And(a=load,b=r6,out=l6);
    And(a=load,b=r7,out=l7);
    And(a=load,b=r8,out=l8);
    Register(in=in,load=l1,out=o1);
    Register(in=in,load=l2,out=o2);
    Register(in=in,load=l3,out=o3);
    Register(in=in,load=l4,out=o4);
    Register(in=in,load=l5,out=o5);
    Register(in=in,load=l6,out=o6);
    Register(in=in,load=l7,out=o7);
    Register(in=in,load=l8,out=o8);
    Mux8Way16(a=o1,b=o2,c=o3,d=o4,e=o5,f=o6,g=o7,h=o8,sel=address,out=out);
    */

    DMux8Way(in = load, sel = address, a = loadA, b = loadB, c = loadC, d = loadD, e = loadE, f = loadF, g = loadG, h = loadH);
    Register(in = in, load = loadA, out = o1);
    Register(in = in, load = loadB, out = o2);
    Register(in = in, load = loadC, out = o3);
    Register(in = in, load = loadD, out = o4);
    Register(in = in, load = loadE, out = o5);
    Register(in = in, load = loadF, out = o6);
    Register(in = in, load = loadG, out = o7);
    Register(in = in, load = loadH, out = o8);
    Mux8Way16(a = o1, b = o2, c = o3, d = o4, e = o5, f = o6, g = o7, h = o8, sel = address, out = out);
}